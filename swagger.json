{
    "swagger": "2.0",
    "info": {
      "description": "Author's Haven [https://metis-ah-staging.herokuapp.com/](https://metis-ah-staging.herokuapp.com/) is a platform that allows you to share your knowledge across the world",
      "version": "1.0.0",
      "title": "Author's Haven",
      "contact": {
        "email": "metis.ah2018@gmail.com"
      }
    },
    "host": "localhost:8000",
    "basePath": "/",
    "tags": [
      {
        "name": "User",
        "description": "Everything about all Users"
      },
      {
        "name": "Articles",
        "description": "Everything about all Articles"
      }
    ],
    "schemes": [
      "https",
      "http"
    ],
    "paths": {
      "/": {
        "get": {
          "summary": "Welcomes users to app",
          "description": "Users recieves a welcome message",
          "responses": {
            "200": {
              "description": "Welcome to the simulation program"
            }
          }
        }
			},
			"/api/v1/users/auth/signup": {
        "post": {
					"tags": [ "User" ],
          "summary": "Allows user to sign up with username, email and password",
          "description": "User recieves JWtoken as he supplies his username, email and password",
          "consumes": [
						"application/json"
					],
					"produces": [
						"application/json"
					],
					"parameters": [
						{
							"in": "body",
							"name": "body",
							"description": "User's object that need to be parsed",
							"required": true,
							"schema": {
								"$ref": "#/definitions/Signup"
							}
						}
					],
          "responses": {
            "201": {
              "description": "User is signed up successfully"
						},
						"400": {
							"description": "Email already exist!"
						}
          }
        }
			},
			"/api/v1/users/auth/login": {
        "post": {
					"tags": [ "User" ],
          "summary": "Allows user to login email and password",
					"description": "User receives JWtoken on successful login",
					"consumes": [
						"application/json"
					],
					"produces": [
						"application/json"
					],
					"parameters": [
						{
							"in": "body",
							"name": "body",
							"description": "User's object that need to be parsed",
							"required": true,
							"schema": {
								"$ref": "#/definitions/Login"
							}
						}
					],
          "responses": {
            "200": {
              "description": "User is signed in successfully"
						},
						"401": {
							"description": "Invalid credentials supplied"
						}
      }
    }
      },
      "/api/v1/users/verify/{token}": {
        "put": {
          "tags": ["User"],
          "summary": "Verify user account",
          "description": "User recive an email like account verified",
          "operationId": "getToken",
          "consumes": [
            "application/json"
          ],
          "produces": [
						"application/json"
					],
          "parameters": [
            {
              "name": "token",
              "in": "path",
              "description": "Token generated for user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200":{
              "description": "Your account is verified successfully"
            },
            "401": {
              "description": "Your account is already verified"
            }
          }
        }
      },
      "/api/v1/users/": {
        "get": {
          "tags": [ "User" ],
          "summary": "A logged in user can retrieve all users",
          "description": "Users retrieve all users",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success!"
          },
          "401": {
            "description": "Failed to authenticate token! Valid token required"
          }
        }
      }
    },
      "/api/v1/users/auth/reset-password": {
        "post": {
					"tags": [ "User" ],
          "summary": "Allows user to request for a password reset",
					"description": "User receives an email with a link to reset password",
					"consumes": [
						"application/json"
					],
					"produces": [
						"application/xml"
					],
					"parameters": [
						{
							"in": "body",
							"name": "body",
							"description": "User's object that need to be parsed",
							"required": true,
							"schema": {
								"$ref": "#/definitions/reset-password-email"
							}
						}
					],
          "responses": {
            "200": {
              "description": "Password reset link has been sent to your email"
						},
						"401": {
							"description": "Invalid credentials supplied"
						}
          }
        }
      },
      "/api/v1/users/auth/reset-password/{token}": {
        "put": {
					"tags": [ "User" ],
          "summary": "Allows user to reset password",
					"description": "User password reset endpoint",
					"consumes": [
						"application/json"
					],
					"produces": [
						"application/xml"
					],
					"parameters": [
						{
							"in": "path",
							"name": "token",
							"description": "Token sent to the user's email for password reset",
              "required": true,
              "type": "string"
            },
            {
							"in": "body",
							"name": "body",
							"description": "User's object that need to be parsed",
							"required": true,
							"schema": {
								"$ref": "#/definitions/reset-password"
							}
            }
					],
          "responses": {
            "200": {
              "description": "Password reset successful"
						},
						"401": {
							"description": "Verification link not valid"
            },
            "500": {
              "description": "Request could not be completed. Please try again"
            }
          }
        }
			},
      "/api/v1/users/{userId}/follow": {
        "post": {
					"tags": [ "User" ],
          "summary": "Allows user to follow other users",
					"description": "User will become a follower of another user",
					"consumes": [
						"application/json"
					],
					"parameters": [
						{
							"in": "header",
							"name": "authorization",
							"description": "user token",
							"required": true
            },
            {
							"in": "path",
							"name": "userId",
							"description": "user id to follow",
							"required": true
						}
					],
          "responses": {
            "200": {
              "description": "you are now following the user"
						}
          }
        }
      },
      "/api/v1/users/{userId}/unfollow": {
        "delete": {
					"tags": [ "User" ],
          "summary": "Allows user to unfollow other users",
					"description": "User will unfollow another user",
					"consumes": [
						"application/json"
					],
					"produces": [
						"application/json"
					],
					"parameters": [
						{
							"in": "header",
							"name": "authorization",
							"description": "user token",
							"required": true
            },
            {
							"in": "path",
							"name": "userId",
							"description": "user id to unfollow",
							"required": true
						}
					],
          "responses": {
            "200": {
              "description": "you are now longer following the user"
						}
          }
        }
			},
    "/api/v1/users/followings": {
      "get": {
        "tags": [ "User" ],
        "summary": "Allows user to see followers",
        "description": "User will view followers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "you are now following the user"
          }
        }
			},
      "/api/v1/articles/:articleId/comments/:commentId/like": {
        "post": {
					"tags": [ "Like" ],
          "summary": "Route for authenticated users to like or unlike a comments on an article",
					"description": "Returns a confirmation is like or unlike is successful",
					"parameters": [
						{
							"in": "params",
							"name": "commentId",
							"description": "the id of the comment to be liked",
							"required": true
						}
					],
          "responses": {
            "201": {
              "description": "Returns a 201 status code on the first like"
						},
            "200": {
              "description": "Returns a 200 when like is toggled based on yours like/unlike action"
						},
						"400": {
							"description": "Returns a 400 if params is not valid"
						},
            "500": {
							"description": "Returns a 500 if comment no longer exists"
						}
          }
        }
      }
    },
    "/api/v1/articles/:articleId": {
      "post": {
        "tags": [ "Articles" ],
        "summary": "Route for authenticated users to post comments on an article",
        "description": "Returns the user and the user's comment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "comment object to be returned when a user makes a post request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Comment posted successfully"
          },
          "400": {
            "description": "Comment is empty"
          }
        }
      }
    }
  },
    "definitions": {
      "signin": {
        "type": "object",
        "required": [
          "firstname",
          "lastname",
          "email",
          "password"
        ],
        "properties": {
          "firstname": {
            "type": "string",
            "example": "Opeoluwa"
          },
          "lastname": {
            "type": "string",
            "example": "Iyi-Kuyoro"
          },
          "email": {
            "type": "string",
            "example": "ope.iky@ah.com"
          },
          "password": {
            "type": "string",
            "example": "PassWords"
          }
        }
			},
			"Signup": {
				"type": "object",
				"properties": {
					"username": {
						"type": "string",
						"example": "metis"
					},
					"email": {
						"type": "string",
						"example": "metis@gmail.com"
					},
					"password": {
						"type": "string",
						"example": "Password"
					}
				},
				"json": {
					"name": "User"
				}
      },
      "Login": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string",
						"example": "metis@gmail.com"
					},
					"password": {
						"type": "string",
						"example": "Password"
					}
				},
				"json": {
					"name": "User"
				}
      },
      "reset-password-email": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string",
						"example": "metis@gmail.com"
					}
				},
				"json": {
					"name": "User"
				}
      },
      "reset-password": {
				"type": "object",
				"properties": {
					"password": {
						"type": "string",
						"example": "Jojitoon"
					}
				},
				"json": {
					"name": "User"
				}
			},
      "Comment": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "example": "Great post!"
          }
        },
        "json": {
          "name": "Comment"
        }
      }
    }
  }
